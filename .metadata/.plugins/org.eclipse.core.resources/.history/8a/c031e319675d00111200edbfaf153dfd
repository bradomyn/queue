//
// This file is part of an OMNeT++/OMNEST simulation example.
//
// Copyright (C) 2006-2008 OpenSim Ltd.
//
// This file is distributed WITHOUT ANY WARRANTY. See the file
// `license' for details on this and other legal matters.
//

#include "Sink.h"
#include "Job.h"

namespace queueing {

Define_Module(Sink);

void Sink::initialize()
{
    lifeTimeSignal = registerSignal("lifeTime");
    totalQueueingTimeSignal = registerSignal("totalQueueingTime");
    queuesVisitedSignal = registerSignal("queuesVisited");
    totalServiceTimeSignal = registerSignal("totalServiceTime");
    totalDelayTimeSignal = registerSignal("totalDelayTime");
    delaysVisitedSignal = registerSignal("delaysVisited");
    generationSignal = registerSignal("generation");
    keepJobs = par("keepJobs");

    numReceived = 0;
    WATCH(numReceived);
}

void Sink::handleMessage(cMessage *msg)
{
	simtime_t currentTime = simTime();
	simtime_t lifetime = currentTime-msg->getCreationTime();
    Job *job = check_and_cast<Job *>(msg);

    numReceived++;

    std::cout << "#" << numReceived << ": " << job->getName() << " received. ct " << msg->getCreationTime() << " st " << currentTime << " lifetime " << lifetime  << std::endl;

    switch( job->getPriority() ) {
    case 0:
    	v0.push_back(lifetime);
    	break;
    case 1:
    	v1.push_back(lifetime);
        	break;
    case 2:
    	v2.push_back(lifetime);
        	break;
    case 3:
    	v3.push_back(lifetime);
        	break;
    case 4:
    	v4.push_back(lifetime);
        	break;
    case 5:
    	v5.push_back(lifetime);
        	break;
    case 6:
    	v6.push_back(lifetime);
        	break;
    case 7:
    	v7.push_back(lifetime);
        	break;
    }


    // gather statistics
    emit(lifeTimeSignal, simTime()- job->getCreationTime());
    emit(totalQueueingTimeSignal, job->getTotalQueueingTime());
    emit(queuesVisitedSignal, job->getQueueCount());
    emit(totalServiceTimeSignal, job->getTotalServiceTime());
    emit(totalDelayTimeSignal, job->getTotalDelayTime());
    emit(delaysVisitedSignal, job->getDelayCount());
    emit(generationSignal, job->getGeneration());

    if (!keepJobs)
        delete msg;
}

void Sink::finish()
{
    // TODO missing scalar statistics
}

}; //namespace

