//
// This file is part of an OMNeT++/OMNEST simulation example.
//
// Copyright (C) 1992-2008 Andras Varga
//
// This file is distributed WITHOUT ANY WARRANTY. See the file
// `license' for details on this and other legal matters.
//


#include "WRS.h"

namespace wrs {

Define_Module(WRS);

WRS::WRS() {
	// store pointer to queue 7
	q7 = check_and_cast<WRPassiveQueue *>( getParentModule()->findObject("wrQueue7", true) );

	// store pointers to other queues
	std::string module;
	char buffer[3];
	for( int i=0; i<7; i++ ) {
		module = "wrQueue";
		sprintf(buffer,"%d", i);
		buffer[2]='\0';
		module += buffer;
		WRPassiveQueue *pq = check_and_cast<WRPassiveQueue *>( getParentModule()->findObject(module.c_str(), true) );
		qs.push_back(pq);
	}
}

WRS::~WRS() {

}

simtime_t WRS::startService(cMessage *msg)
{
    EV << "Starting service of " << msg->getName() << endl;
    std::cout << "Starting service of " << msg->getName() << std::endl;
    return par("serviceTime");
}

void WRS::endService(cMessage *msg)
{
    EV << "Completed service of " << msg->getName() << endl;
    std::cout << "Completed service of " << msg->getName() << std::endl;

#if 0
    // extract priority from jobname
    std::string jobname = std::string(msg->getName());
	size_t found1;
	found1 = jobname.find("y: ");
	//std::cout << "jobname " << jobname << " found1 " << found1 << std::endl;
	// extract priority from jobname
	int prio=0;
	if( found1!=std::string::npos ) {
		std::string priority = jobname.substr(found1+2);
		std::istringstream stm;
		stm.str(priority);
		stm >> prio;
		//std::cout << "priority " << prio << std::endl;
	}

	// deliver to matching sink
    send( msg, "out", prio );
#else

#endif

}

}; //namespace

