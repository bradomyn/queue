//
// This file is part of an OMNeT++/OMNEST simulation example.
//
// Copyright (C) 2006-2008 OpenSim Ltd.
//
// This file is distributed WITHOUT ANY WARRANTY. See the file
// `license' for details on this and other legal matters.
//

// SMa, 11.01.2012

#ifndef __QUEUEING_WRSERVER_H
#define __QUEUEING_WRSERVER_H

#include "IServer.h"

#include "WRPassiveQueue.h"

namespace queueing {

class Job;
class SelectionStrategy;

/**
 * The queue server. It cooperates with several Queues that which queue up
 * the jobs, and send them to Server on request.
 *
 * @see PassiveQueue
 */
class QUEUEING_API WRServer : public cSimpleModule, public IServer
{
    private:
		simsignal_t busySignal;

        int numQueues;
        SelectionStrategy *selectionStrategy;

        Job *jobServiced;
        cMessage *endServiceMsg;

        std::vector<cMessage*> jobs;

        WRPassiveQueue *q7;
        std::vector<WRPassiveQueue *> qs;

    public:
        WRServer();
        virtual ~WRServer();

    protected:
        virtual void initialize();
        virtual int numInitStages() const {return 2;}
        virtual void handleMessage(cMessage *msg);
        virtual void finish();

    public:
        virtual bool isIdle();
};

}; //namespace

#endif


