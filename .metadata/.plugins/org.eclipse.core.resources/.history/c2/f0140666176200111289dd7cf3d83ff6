//
// This file is part of an OMNeT++/OMNEST simulation example.
//
// Copyright (C) 2006-2008 OpenSim Ltd.
//
// This file is distributed WITHOUT ANY WARRANTY. See the file
// `license' for details on this and other legal matters.
//

#include "SelectionStrategiesServer.h"
#include "PassiveQueue.h"
#include "Server.h"

namespace queueing {

SelectionStrategyServer::SelectionStrategyServer(cSimpleModule *module, bool selectOnInGate)
{
    hostModule = module;
    isInputGate = selectOnInGate;
    gateSize = isInputGate ? hostModule->gateSize("in") : hostModule->gateSize("out");
}

SelectionStrategyServer::~SelectionStrategyServer()
{
}

SelectionStrategyServer *SelectionStrategyServer::create(const char *algName, cSimpleModule *module, bool selectOnInGate)
{
    SelectionStrategyServer *strategy = NULL;

    if (strcmp(algName, "priority") == 0) {
        strategy = new PrioritySelectionStrategyServer(module, selectOnInGate);
    } else if (strcmp(algName, "random") == 0) {
        strategy = new RandomSelectionStrategyServer(module, selectOnInGate);
    } else if (strcmp(algName, "roundRobin") == 0) {
        strategy = new RoundRobinSelectionStrategyServer(module, selectOnInGate);
    } else if (strcmp(algName, "shortestQueue") == 0) {
        strategy = new ShortestQueueSelectionStrategyServer(module, selectOnInGate);
    } else if (strcmp(algName, "longestQueue") == 0) {
        strategy = new LongestQueueSelectionStrategyServer(module, selectOnInGate);
    } else if (strcmp(algName, "WRS") == 0) {
            strategy = new WRSSelectionStrategyServer1(module, selectOnInGate);
        }

    return strategy;
}

cGate *SelectionStrategyServer::selectableGate(int i)
{
    if (isInputGate)
        return hostModule->gate("in", i)->getPreviousGate();
    else
        return hostModule->gate("out", i)->getNextGate();
}

bool SelectionStrategyServer::isSelectable(cModule *module)
{
    IPassiveQueue *pqueue = dynamic_cast<IPassiveQueue *>(module);
    if (pqueue != NULL)
        return pqueue->length() > 0;

    IServer *server = dynamic_cast<IServer *>(module);
    if (server != NULL)
        return server->isIdle();

    opp_error("Only IPassiveQueue and IServer is supported by this Strategy");
    return true;
}

// --------------------------------------------------------------------------------------------

PrioritySelectionStrategyServer::PrioritySelectionStrategyServer(cSimpleModule *module, bool selectOnInGate) :
    SelectionStrategyServer(module, selectOnInGate)
{
}

int PrioritySelectionStrategyServer::select()
{
#if 0
    // return the highest selectable index
    for (int i=gateSize-1; i>=0; i--) {
        if (isSelectable(selectableGate(i)->getOwnerModule())) {
        	//std::cout << __FILE__ << ":" << __FUNCTION__ << ":" << __LINE__ << " selected gate " << i << std::endl;
        	return i;
        }
    }
#else
	//std::string s = isInputGate?"inputGate: ":"outputGate: ";
	//std::cout << s << "gate size " << gateSize << std::endl;
    // return the smallest selectable index
    for (int i=0; i<gateSize; i++) {
        if (isSelectable(selectableGate(i)->getOwnerModule())) {
        	//std::cout << __FILE__ << ":" << __FUNCTION__ << ":" << __LINE__ << " selected gate " << i << std::endl;
        	return i;
        }
    }
#endif
    // if none of them is selectable return an invalid no.
   // std::cout << __FILE__ << ":" << __FUNCTION__ << " nothing is selectable" << std::endl;
    return -1;
}

// --------------------------------------------------------------------------------------------

RandomSelectionStrategyServer::RandomSelectionStrategyServer(cSimpleModule *module, bool selectOnInGate) :
    SelectionStrategyServer(module, selectOnInGate)
{
}

int RandomSelectionStrategyServer::select()
{
    // return the smallest selectable index
    int noOfSelectables = 0;
    for (int i=0; i<gateSize; i++)
        if (isSelectable(selectableGate(i)->getOwnerModule()))
            noOfSelectables++;

    int rnd = intuniform(1, noOfSelectables);

    for (int i=0; i<gateSize; i++)
        if (isSelectable(selectableGate(i)->getOwnerModule()) && (--rnd == 0))
            return i;
    return -1;
}

// --------------------------------------------------------------------------------------------

RoundRobinSelectionStrategyServer::RoundRobinSelectionStrategyServer(cSimpleModule *module, bool selectOnInGate) :
    SelectionStrategyServer(module, selectOnInGate)
{
    lastIndex = -1;
}

int RoundRobinSelectionStrategyServer::select()
{
    // return the smallest selectable index
    for (int i = 0; i<gateSize; ++i)
    {
        lastIndex = (lastIndex+1) % gateSize;
        if (isSelectable(selectableGate(lastIndex)->getOwnerModule()))
            return lastIndex;
    }

    // if none of them is selectable return an invalid no.
    return -1;
}

// --------------------------------------------------------------------------------------------

ShortestQueueSelectionStrategyServer::ShortestQueueSelectionStrategyServer(cSimpleModule *module, bool selectOnInGate) :
    SelectionStrategyServer(module, selectOnInGate)
{
}

int ShortestQueueSelectionStrategyServer::select()
{
    // return the smallest selectable index
    int result = -1;            // by default none of them is selectable
    int sizeMin = INT_MAX;
    for (int i = 0; i<gateSize; ++i)
    {
        cModule *module = selectableGate(i)->getOwnerModule();
        int length = (check_and_cast<IPassiveQueue *>(module))->length();;
        if (isSelectable(module) && (length<sizeMin))
        {
            sizeMin = length;
            result = i;
        }
    }
    return result;
}

// --------------------------------------------------------------------------------------------

LongestQueueSelectionStrategyServer::LongestQueueSelectionStrategyServer(cSimpleModule *module, bool selectOnInGate) :
    SelectionStrategyServer(module, selectOnInGate)
{
}

int LongestQueueSelectionStrategyServer::select()
{
    // return the longest selectable queue
    int result = -1;            // by default none of them is selectable
    int sizeMax = -1;
    for (int i = 0; i<gateSize; ++i)
    {
        cModule *module = selectableGate(i)->getOwnerModule();
        int length = (check_and_cast<IPassiveQueue *>(module))->length();;
        if (isSelectable(module) && length>sizeMax)
        {
            sizeMax = length;
            result = i;
        }
    }
    return result;
}

// --------------------------------------------------------------------------------------------

WRSSelectionStrategyServer1::WRSSelectionStrategyServer1(cSimpleModule *module, bool selectOnInGate) :
    SelectionStrategyServer(module, selectOnInGate)
{
}

int WRSSelectionStrategyServer1::select()
{
	// TODO check queues for priority 7 packets
#if 1
	// priority 7
	cModule *module7 = selectableGate(7)->getOwnerModule();
	int length = (check_and_cast<IPassiveQueue *>(module7))->length();;
	if( length>0 ) {
		std::cout << module7->getName() << " queue length " << length << std::endl;
		return 7;
	}

	int result = -3;

	for( int i=gateSize-1; i>=0; i-- ) {
		//std::cout << selectableGate(i)->getOwnerModule()->getName() << " gateSize " << gateSize << std::endl;
		if (isSelectable(module) && length>sizeMax) {
			sizeMax = length;
			result = i;
		}
	}



	return result;
#else
    // return the longest selectable queue
    int result = -1;            // by default none of them is selectable
    int sizeMax = -1;
    for (int i = 0; i<gateSize; ++i)
    {
        cModule *module = selectableGate(i)->getOwnerModule();
        int length = (check_and_cast<IPassiveQueue *>(module))->length();;
        if (isSelectable(module) && length>sizeMax)
        {
            sizeMax = length;
            result = i;
        }
    }
    return result;
#endif
}

}; //namespace

