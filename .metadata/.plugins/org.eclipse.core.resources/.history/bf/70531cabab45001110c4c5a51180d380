//
// This file is part of an OMNeT++/OMNEST simulation example.
//
// Copyright (C) 2006-2008 OpenSim Ltd.
//
// This file is distributed WITHOUT ANY WARRANTY. See the file
// `license' for details on this and other legal matters.
//

#include "WRTrigger.h"
#include "Job.h"
#include <cscheduler.h>
#include <time.h>

#ifdef __linux__
#include <sys/time.h>
#include <sys/types.h>
#endif

namespace queueing {


void WRTriggerBase::initialize()
{
	createdSignal = registerSignal("created");

	jobCounter = 0;
    WATCH(jobCounter);
    jobName = par("jobName").stringValue();
    if (jobName == "")
        jobName = getName();
}

Job *WRTriggerBase::createJob()
{
    char buf[80];
    sprintf(buf, "%.60s-%d", jobName.c_str(), ++jobCounter);
    Job *job = new Job(buf);
    return job;
}

void WRTriggerBase::finish()
{
    emit(createdSignal, jobCounter);
}

//----

Define_Module(WRTrigger);

void WRTrigger::initialize()
{
    WRTriggerBase::initialize();
    startTime = par("startTime");
    stopTime = par("stopTime");
    numJobs = par("numJobs");

    // schedule the first message timer for start time
    scheduleAt(startTime, new cMessage("newJobTimer"));

}

void WRTrigger::handleMessage(cMessage *msg)
{
    if ((numJobs < 0 || numJobs > jobCounter) && (stopTime < 0 || stopTime > simTime()))
    {
#if 1
    	struct timeval tp;
    	double sec, usec, start, end;
    	gettimeofday( &tp, NULL );
    	sec = static_cast<double>( tp.tv_sec );
    	usec = static_cast<double>( tp.tv_usec )/1E6;
    	//start = sec + usec;
    	//end = sec + usec;
    	// Time calculation (in seconds)
    	//double time = end - start;
    	std::cout << "TRIGGER sec " << sec << " usec " << usec << std::endl;
#endif
        // reschedule the timer for the next message
        scheduleAt(simTime()/*+ par("interArrivalTime").doubleValue()*/, msg);

#if 0
        Job *job = generateJob();
        send(job, "outv", 0);
#else
        // generate 8 jobs at once and send to sources
        for( int i=0; i<8; i++ ) {
        	//std::cout << "generate job " << i << std::endl;
        	Job *job = generateJob();
        	send(job, "outv", i);
        }
#endif

    }
    else
    {
        // finished
        delete msg;
    }

}

Job * WRTrigger::generateJob() {
	char buf[80];
	sprintf(buf, "%.60s-%d", jobName.c_str(), ++jobCounter);
	Job *job = new Job(buf);
	int random = (int)(rand() / (((double)RAND_MAX + 1)/ (double)(7+1)));

	// TODO work with a fixed, repeatable data set
	job->setPriority(random);
	char name[25];
	sprintf(name, "id: %ld, priority: %d", job->getId(), random);
	job->setName(name);
	//std::cout << "job (id: " << job->getId() << ") priority set to: " << random << std::endl;

	return job;
}

//----

Define_Module(WRTriggerOnce);

void WRTriggerOnce::initialize()
{
    WRTriggerBase::initialize();
    simtime_t time = par("time");
    scheduleAt(time, new cMessage("newJobTimer"));

    // SMa, 13.01.2012
    counter=10;
    WATCH(counter);	// allows to watch this variable in the GUI
}

void WRTriggerOnce::handleMessage(cMessage *msg)
{
    ASSERT(msg->isSelfMessage());
    delete msg;

    int n = par("numJobs");
    for (int i=0; i<n; i++)
    {
        Job *job = createJob();
        send(job, "out");
        // SMa, 13.01.2012
        counter--;
    }
}

}; //namespace

