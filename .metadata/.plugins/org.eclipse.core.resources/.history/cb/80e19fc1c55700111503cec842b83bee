//
// This file is part of an OMNeT++/OMNEST simulation example.
//
// Copyright (C) 1992-2008 Andras Varga
//
// This file is distributed WITHOUT ANY WARRANTY. See the file
// `license' for details on this and other legal matters.
//


#include <omnetpp.h>

#include "Job.h"

#include "Timer.h"

using namespace queueing;

namespace fifo {

/**
 * Generates messages or jobs; see NED file for more info.
 */
class WRSource : public cSimpleModule
{
  private:
    cMessage *sendMessageEvent;
    int jobCounter;
    Job* generateJob();
    std::vector<Job*> generateJobs(int number);
    int numSent;

  public:
    WRSource();
     virtual ~WRSource();

  protected:
    virtual void initialize();
    virtual void handleMessage(cMessage *msg);

};

Define_Module(WRSource);

WRSource::WRSource()
{
    sendMessageEvent = NULL;
    numSent = 0;
}

WRSource::~WRSource()
{
    cancelAndDelete(sendMessageEvent);
}

void WRSource::initialize()
{
    sendMessageEvent = new cMessage("sendMessageEvent");
    scheduleAt(simTime(), sendMessageEvent);
}

void WRSource::handleMessage(cMessage *msg)
{
    ASSERT(msg==sendMessageEvent);

#if 0
    cMessage *job = new cMessage("job");
    Timer t;
    timeval tv = t.currentTime();
    //std::cout << "source ";
    //t.print();

  	// TODO work with a fixed, repeatable data set
    double triggerTime = static_cast<double>( tv.tv_sec ) + static_cast<double>( tv.tv_usec )/1E6;
	//triggerTime = simTime().dbl();
	//std::cout << "triggerTime " << triggerTime << std::endl;
	//std::cout << "TRIGGER "; t.print(); std::cout << std::endl;

	char name[80];
	int random = (int)(rand() / (((double)RAND_MAX + 1)/ (double)(7+1)));
	sprintf(name, "id: %ld, priority: %d; %f", job->getId(), random, triggerTime);
	name[79] = '\0';
	job->setName(name);


    send(job, "out");

    scheduleAt(simTime()+par("sendIaTime").doubleValue(), sendMessageEvent);
#else
    int num = 10;
    std::vector<Job*> v = generateJobs(num);
	std::vector<Job*>::iterator it;
	for( it=v.begin(); it!=v.end(); it++ ) {
		send(*it, "out");	// WRSwitch8
		//scheduleAt(simTime(), sendMessageEvent);
		scheduleAt(simTime()+par("sendIaTime").doubleValue(), sendMessageEvent);
		numSent++;
	}
#endif
}

std::vector<Job*> WRSource::generateJobs(int number) {
	std::vector<Job*> jobs;

	for( int i=0; i<number; i++ ) {
		jobs.push_back(generateJob());
	}

	return jobs;
} // generateJobs()

Job * WRSource::generateJob() {
	char buf[80];
	std::string jobName="j";
	sprintf(buf, "%.60s-%d", jobName.c_str(), ++jobCounter);
	Job *job = new Job(buf);
	int random = (int)(rand() / (((double)RAND_MAX + 1)/ (double)(7+1)));

	// TODO work with a fixed, repeatable data set
	job->setPriority(random);

	Timer t;
	timeval tv = t.currentTime();
	double triggerTime = static_cast<double>( tv.tv_sec ) + static_cast<double>( tv.tv_usec )/1E6;
	//triggerTime = simTime().dbl();
	//std::cout << "triggerTime " << triggerTime << std::endl;
	//std::cout << "TRIGGER "; t.print(); std::cout << std::endl;

	char name[80];
	sprintf(name, "id: %ld, priority: %d; %f", job->getId(), random, triggerTime);
	name[79] = '\0';
	job->setName(name);
	//std::cout << "job (id: " << job->getId() << ") priority set to: " << random << std::endl;

	job->setTimestamp();
	//simtime_t timeSource = job->getTimestamp();
	//std::cout << "source " << timeSource.str().c_str() << std::endl;

	return job;
} // generateJob()

}; //namespace

